/* BooleanFormulaParser.java */
/* Generated By:JavaCC: Do not edit this line. BooleanFormulaParser.java */
package com.booleworks.logicng.io.parsers.javacc;

import com.booleworks.logicng.formulas.*;
import com.booleworks.logicng.util.Pair;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;

public class BooleanFormulaParser implements BooleanFormulaParserConstants {

    private FormulaFactory f;

    public void setFactory(final FormulaFactory f) {
        this.f = f;
    }

    public FormulaFactory getFactory() {
        return this.f;
    }

  final public Formula formula() throws ParseException {Formula formula;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 0:{
      jj_consume_token(0);
formula = f.verum();
      break;
      }
    case NUMBER:
    case LITERAL:
    case TRUE:
    case FALSE:
    case LBR:
    case NOT:{
      formula = equiv();
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  final public Formula equiv() throws ParseException {Formula left;
  Formula right = null;
    left = impl();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUIV:{
      jj_consume_token(EQUIV);
      right = equiv();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
{if ("" != null) return right == null ? left : f.equivalence(left, right);}
    throw new Error("Missing return statement in function");
}

  final public Formula impl() throws ParseException {Formula left;
  Formula right = null;
    left = disj();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IMPL:{
      jj_consume_token(IMPL);
      right = impl();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return right == null ? left : f.implication(left, right);}
    throw new Error("Missing return statement in function");
}

  final public Formula disj() throws ParseException {Formula a, b;
  LinkedHashSet<Formula> conjs = new LinkedHashSet<>();
    a = conj();
conjs.add(a);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(OR);
      b = conj();
conjs.add(b);
    }
{if ("" != null) return f.or(conjs);}
    throw new Error("Missing return statement in function");
}

  final public Formula conj() throws ParseException {Formula a, b;
  LinkedHashSet<Formula> lits = new LinkedHashSet<>();
    a = lit();
lits.add(a);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(AND);
      b = lit();
lits.add(b);
    }
{if ("" != null) return f.and(lits);}
    throw new Error("Missing return statement in function");
}

  final public Formula lit() throws ParseException {Formula formula, op;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      op = lit();
formula = f.not(op);
      break;
      }
    case NUMBER:
    case LITERAL:
    case TRUE:
    case FALSE:
    case LBR:{
      formula = simp();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  final public Formula simp() throws ParseException {Formula formula;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:
    case LITERAL:{
      formula = comparison();
      break;
      }
    case TRUE:
    case FALSE:{
      formula = constant();
      break;
      }
    case LBR:{
      jj_consume_token(LBR);
      formula = equiv();
      jj_consume_token(RBR);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  final public Formula comparison() throws ParseException {Formula formula;
  Pair<List<Literal>, List<Integer>> e;
  CType c;
  Token t;
    if (jj_2_1(2)) {
      e = add();
      c = comperator();
      t = jj_consume_token(NUMBER);
formula = f.pbc(c, Integer.parseInt(t.image), e.first(), e.second());
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUMBER:{
        t = jj_consume_token(NUMBER);
formula = (t.image.startsWith("~") ? f.literal(t.image.substring(1), false) : f.literal(t.image, true));
        break;
        }
      case LITERAL:{
        t = jj_consume_token(LITERAL);
formula = (t.image.startsWith("~") ? f.literal(t.image.substring(1), false) : f.literal(t.image, true));
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return formula;}
    throw new Error("Missing return statement in function");
}

  final public CType comperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:{
      jj_consume_token(EQ);
{if ("" != null) return CType.EQ;}
      break;
      }
    case LE:{
      jj_consume_token(LE);
{if ("" != null) return CType.LE;}
      break;
      }
    case LT:{
      jj_consume_token(LT);
{if ("" != null) return CType.LT;}
      break;
      }
    case GE:{
      jj_consume_token(GE);
{if ("" != null) return CType.GE;}
      break;
      }
    case GT:{
      jj_consume_token(GT);
{if ("" != null) return CType.GT;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Pair<List<Literal>, List<Integer>> add() throws ParseException {Pair<Literal, Integer> m1, m2;
    List<Literal> lits = new ArrayList<>();
    List<Integer> coeffs = new ArrayList<>();
    Token a;
    m1 = mul();
lits.add(m1.first()); coeffs.add(m1.second());
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      a = jj_consume_token(ADD);
      m2 = mul();
lits.add(m2.first()); coeffs.add (a.image.equals("+") ? m2.second() : -m2.second());
    }
{if ("" != null) return new Pair<>(lits, coeffs);}
    throw new Error("Missing return statement in function");
}

  final public Pair<Literal, Integer> mul() throws ParseException {Token n, l;
  Literal lit;
  int c = 1;
    if (jj_2_2(3)) {
      n = jj_consume_token(NUMBER);
      jj_consume_token(MUL);
      l = jj_consume_token(LITERAL);
lit = (l.image.startsWith("~") ? f.literal(l.image.substring(1), false) : f .literal(l.image, true)); c = Integer.parseInt(n.image);
    } else if (jj_2_3(3)) {
      n = jj_consume_token(NUMBER);
      jj_consume_token(MUL);
      l = jj_consume_token(NUMBER);
lit = f.literal(l.image, true); c = Integer.parseInt(n.image);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LITERAL:{
        l = jj_consume_token(LITERAL);
lit = (l.image.startsWith("~") ? f.literal(l.image.substring(1), false) : f.literal (l.image, true) );
        break;
        }
      case NUMBER:{
        n = jj_consume_token(NUMBER);
lit = f.literal(n.image, true);
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return new Pair<>(lit, c);}
    throw new Error("Missing return statement in function");
}

  final public Formula constant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return f.verum();}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return f.falsum();}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(MUL)) return true;
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(NUMBER)) return true;
    if (jj_scan_token(MUL)) return true;
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_comperator_130_5_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_comperator_130_5_8()) {
    jj_scanpos = xsp;
    if (jj_3R_comperator_131_7_9()) {
    jj_scanpos = xsp;
    if (jj_3R_comperator_132_7_10()) {
    jj_scanpos = xsp;
    if (jj_3R_comperator_133_7_11()) {
    jj_scanpos = xsp;
    if (jj_3R_comperator_134_7_12()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_comperator_130_5_8()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_mul_154_3_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_mul_156_5_13()) {
    jj_scanpos = xsp;
    if (jj_3R_mul_157_5_14()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_add_144_3_4()) return true;
    if (jj_3R_comperator_130_5_5()) return true;
    return false;
  }

  private boolean jj_3R_add_144_3_4()
 {
    if (jj_3R_mul_154_3_6()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_add_144_66_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_comperator_134_7_12()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_add_144_66_7()
 {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_comperator_133_7_11()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_mul_157_5_14()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_comperator_132_7_10()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_mul_156_5_13()
 {
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_comperator_131_7_9()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public BooleanFormulaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xbe1,0x8000,0x4000,0x2000,0x1000,0xbe0,0x3e0,0x60,0x7c0000,0x20000,0x60,0x180,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BooleanFormulaParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BooleanFormulaParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BooleanFormulaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BooleanFormulaParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BooleanFormulaParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BooleanFormulaParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BooleanFormulaParser(BooleanFormulaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BooleanFormulaParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 12; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[23];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 12; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 23; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 3; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
